import React, { useEffect, useState } from "react";
import {
  Breadcrumb,
  Table,
  Switch,
  Button,
  Avatar,
  Tooltip,
  Input,
  Modal,
} from "antd";
import { Link } from "react-router-dom";
import {
  ZinAddButton,
  ZinRightArrow,
  ZinEditIcon,
  ZinInfo,
  ZinSearch,
} from "../../images";
import { authorizationService } from "../../../service";
import { OverlayMenuDropdown } from "../../../shared-components/overlay-menu/overlay-menu";
import "./index.scss";
import { SearchOutlined, CloseOutlined } from "@ant-design/icons";
import { useNavigate } from "react-router-dom";
import Pagination from "./pagination";

export const AdminUser = () => {
  const [allUsersData, setAllUsersData] = useState([]);
  const [delegatedUsers, setDelegatedUsers] = useState({});
  const [isSubscribed, setIsSubscribed] = useState(false);
  const [ischecked, setischecked] = useState(true);
  const [searchText, setSearchText] = useState("");
  const [showSearch, setShowSearch] = useState(false);
  const [filteredData, setFilteredData] = useState([]);
  const [selectedUser, setSelectedUser] = useState(null);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const navigate = useNavigate();
  const [currentPage, setCurrentPage] = useState(1);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [totalRows, setTotalRows] = useState(0);
  const [users, setUsers] = useState([]);

  const getInitials = (firstName, lastName) => {
    return `${firstName?.charAt(0) || ""}${
      lastName?.charAt(0) || ""
    }`.toUpperCase();
  };

  const totalPages = Math.ceil(totalRows / rowsPerPage);

  useEffect(() => {
    userDataApi();
  }, [currentPage, rowsPerPage]);

  

  const usercolumns = [
    {
      key: "1",
      dataIndex: ["firstName,lastName"],
      title: "Name",
      ellipsis: true,
      width: 200,
      className: "Name-column-user",
      sorter: (a, b) => a.firstName.localeCompare(b.firstName),
      render: (row, data) => (
        <Tooltip title={`${data.firstName} ${data.lastName}`}>
          <div className="user-name-cell">
            <Avatar
              className="user-avatar"
              size={40}
              src={data.profilePic || undefined}
              style={{ backgroundColor: "#87d068", border: "2px solid #fff" }}
            >
              {!data.profilePic && getInitials(data.firstName, data.lastName)}
            </Avatar>
            <span className="user-name ">
              {data.firstName} {data.lastName}
            </span>
          </div>
        </Tooltip>
      ),
    },
    {
      key: "2",
      title: "Role",
      dataIndex: "roleName",
      sorter: (a, b) => a.roleName.localeCompare(b.roleName),
      render: (roleName) => (
        <Tooltip title={roleName}>
          <div>{roleName}</div>
        </Tooltip>
      ),
      width: 150,
      ellipsis: true,
    },

    {
      key: "3",
      title: "Team",
      dataIndex: "teamName",
      sorter: (a, b) => a.teamName.localeCompare(b.teamName),
      width: 180,
      ellipsis: true,
      render: (team) => (
        <Tooltip title={team}>
          <div>{team || "N/A"}</div>
        </Tooltip>
      ),
    },
    {
      key: "4",
      title: "Reporting Manager",
      dataIndex: "reportingName",
      sorter: (a, b) =>
        (a.reportingName || "").localeCompare(b.reportingName || ""),
      width: 180,
      ellipsis: true,
      render: (reportingName) => (
        <Tooltip title={reportingName}>
          <div>{reportingName || "N/A"}</div>
        </Tooltip>
      ),
    },
    {
      key: "5",
      title: "Email",
      dataIndex: "email",
      sorter: (a, b) => a.email.localeCompare(b.email),
      render: (email) => (
        <Tooltip title={email}>
          <div>{email}</div>
        </Tooltip>
      ),
      width: 250,
      ellipsis: true,
    },
    {
      key: "6",
      title: "Phone",
      dataIndex: "phoneNumber",
      sorter: (a, b) =>
        (a.phoneNumber || "").localeCompare(b.phoneNumber || ""),
      width: 150,
      ellipsis: true,
      render: (phone, record) => (
        <Tooltip title={phone || record.phoneExtension}>
          <div>{phone || record.phoneExtension || "N/A"}</div>
        </Tooltip>
      ),
    },
    {
      key: "7",
      title: "Location",
      dataIndex: "location",
      sorter: (a, b) => (a.location || "").localeCompare(b.location || ""),
      width: 180,
      ellipsis: true,
      render: (location) => (
        <Tooltip title={location}>{location || "N/A"}</Tooltip>
      ),
    },
    {
      title: "Status",
      key: "status",
      width: 120,
      fixed: "right",
      align: "center",
      render: (_, record) =>
        delegatedUsers[record.userId] ? (
          <span className="delegated-text">Delegated</span>
        ) : (
          <Switch defaultChecked />
        ),
      align: "center",
      className: "statususercolumn-sticky",
    },
    {
      key: "8",
      title: "Action",
      dataIndex: "action",
      fixed: "right",
      width: 120,
      render: (_, record) => (
        <div className="ActionButton-user">
          <div
            onClick={() =>
              navigate(`/app/admin/usersettings/user/edit/${record.userId}`)
            }
            style={{ cursor: "pointer" }}
          >
            <ZinEditIcon />
          </div>
          {/* {!delegatedUsers[record.userId] && (
            <Button
              onClick={() => handleDelegate(record.userId)}
              type="primary"
            >
              Delegate
            </Button>
          )} */}
        </div>
      ),
      className: "actioncolumn-sticky",
    },
  ];

  const handleChange = (event) => {
    if (event.target.checked) {
      setischecked(true);
    } else {
      setOpenInactivate(true);
    }
    setIsSubscribed((current) => !current);
  };
  const clientExport = () => {
    //export modalpopup
    setOpenExport(true);
  };

  const handleDelegate = (userId) => {
    setDelegatedUsers((prev) => ({ ...prev, [userId]: true }));
  };

  const handleSearch = (value) => {
    setSearchText(value);
    if (!value) {
      setFilteredData(allUsersData);
      return;
    }
    const filtered = allUsersData.filter(
      (item) =>
        (item.firstName &&
          item.firstName.toLowerCase().includes(value.toLowerCase())) ||
        (item.lastName &&
          item.lastName.toLowerCase().includes(value.toLowerCase())) ||
        (item.email &&
          item.email.toLowerCase().includes(value.toLowerCase())) ||
        (item.roleName &&
          item.roleName.toLowerCase().includes(value.toLowerCase()))
    );
    setFilteredData(filtered);
  };

  const handleSearchClick = () => {
    setShowSearch(true);
  };

  const handleClearSearch = () => {
    setSearchText("");
    setFilteredData(allUsersData);
    setShowSearch(false);
  };

  const [offset, setoffset] = useState(0);
  const [limit, setlimit] = useState(10);
  
  const userDataApi = async (page = 1) => {
    const offset = (page - 1) * rowsPerPage; // Calculate offset
    try {
      const response = await authorizationService.getAllUsers(
        offset,
        rowsPerPage
      );
      setAllUsersData(response.data); // Store all users (for future filtering)
      setFilteredData(response.data); // Use filteredData for rendering the table
    } catch (error) {
      console.error("Error fetching user data:", error);
    }
  };

  const handlePageChange = (newPage) => {
    setCurrentPage(newPage);
  };

  return (
    <div className="">
      <div className="admin-breadcrums">
        <div className="d-flex w-100 justify-content-between">
          <Breadcrumb separator={<ZinRightArrow />}>
            <Breadcrumb.Item className="breadcrumbsLink">
              <Link to="/app/dashboard">Home</Link>
            </Breadcrumb.Item>
            <Breadcrumb.Item className="breadcrumbsLink">
              <Link to="/app/admin">Admin</Link>
            </Breadcrumb.Item>
            <Breadcrumb.Item
              overlay={<OverlayMenuDropdown type="User settings" />}
              className="breadcrumbsLink"
            >
              User settings
            </Breadcrumb.Item>
            <Breadcrumb.Item className="breadcrumbsLink">User</Breadcrumb.Item>
          </Breadcrumb>
          <div>
            <Link>
              <ZinInfo />
            </Link>
          </div>
        </div>
      </div>
      <div className="admin-Layout">
        <div className="d-flex user-buttons-top">
          {/* Search Icon and Input Field */}
          <div className="toolbar ms-3 text-end search-container">
            {!showSearch ? (
              <Button
                className="searchIconUser"
                icon={<ZinSearch />}
                onClick={handleSearchClick}
              />
            ) : (
              <div className="search-slide">
                <Input
                  placeholder="Search..."
                  value={searchText}
                  onChange={(e) => handleSearch(e.target.value)}
                  style={{ width: 200 }}
                  allowClear
                />
                <Button
                  icon={<CloseOutlined />}
                  type="text"
                  onClick={handleClearSearch}
                />
              </div>
            )}
          </div>

          {/* Export Button */}
          <div className="toolbar ms-3 text-end">
            <Button
              type="primary"
              size="small"
              onClick={() => console.log("Exporting...")}
            >
              Export
            </Button>
          </div>

          {/* Add Button */}
          <div className="toolbar ms-3 text-end">
            <Button type="primary" size="small">
              <Link to="/app/admin/usersettings/user/add">Add</Link>
            </Button>
          </div>
        </div>

        <div className="user-table">
          <Table
            columns={usercolumns}
            dataSource={filteredData}
            scroll={{ x: 1500, y: "calc(100vh -  346px)" }}
            pagination={false}
          ></Table>
        </div>
        {/* Custom Pagination Component */}
        <Pagination
          currentPage={currentPage}
          totalPages={totalPages}
          onPageChange={handlePageChange} // This should trigger data fetching
          rowsPerPage={rowsPerPage}
          totalRows={totalRows}
        />
      </div>
    </div>
  );
};
